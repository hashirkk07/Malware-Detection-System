#!/usr/bin/env python
# coding: utf-8

# In[71]:


import pandas as pd
import numpy as np
import pickle
import sklearn.ensemble as ske
from sklearn import tree, linear_model
from sklearn.model_selection import train_test_split
from sklearn.feature_selection import SelectFromModel

from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification

from sklearn.feature_selection import SelectFromModel
from sklearn.model_selection import train_test_split
import os
import glob
import json
import pickle


# In[92]:


def string_feature(static_path):
    a = os.listdir(static_path + '/Malware/')
    
    s = set()
    cnt = {}
    no_of_files = 0
    
    for i in a:    
        for j in os.listdir('/home/amit/Downloads/Static_Analysis_Data/Malware/' + i):
            path = '/home/amit/Downloads/Static_Analysis_Data/Malware/' + i + '/'+ j + '/String.txt'
            f = open(path, "r")
            for k in f:  
                if len(k) >= 8:
                    k = k.strip('\n')
                    if k in s:
                        cnt[k] += 1
                    else:
                        s.add(k)
                        cnt[k] = 1
    
            f.close()
    
    data_sorted = sorted(cnt, key=cnt.get, reverse=True)
    
    header = data_sorted[:1000]
    return(header)


# In[93]:


def structure_feature():
    header = ["SizeOfOptionalHeader:" ,"Characteristics:" , "MajorLinkerVersion:", "MinorLinkerVersion:", "SizeOfCode:", "SizeOfInitializedData:", "SizeOfUninitializedData:","AddressOfEntryPoint:","BaseOfCode:","BaseOfData:" ,"ImageBase:","SectionAlignment:","FileAlignment:","MajorOperatingSystemVersion:","MinorOperatingSystemVersion:","MajorImageVersion:","MinorImageVersion:","MajorSubsystemVersion:","MinorSubsystemVersion:","SizeOfImage:","SizeOfHeaders:","CheckSum:","Subsystem:","DllCharacteristics:","SizeOfStackReserve:","SizeOfStackCommit:","SizeOfHeapReserve:","SizeOfHeapCommit:","LoaderFlags:","NumberOfRvaAndSizes:" , 'SectionsMeanVirtualsize:' ,'SectionsMinVirtualsize:', 'SectionMaxVirtualsize:'  , 'SectionsMeanRawsize:' ,  'SectionsMinRawsize:','SectionMaxRawsize:',"SectionMeanNumberOfRelocations:","SectionMinNumberOfRelocations:","SectionMaxNumberOfRelocations:" , "SectionMeanNumberOfLinenumbers:" ,"SectionMinNumberOfLinenumbers:","SectionMaxNumberOfLinenumbers:", "SectionsMeanEntropy:" ,"SectionsMinEntropy:" ,  'SectionsMaxEntropy:']
    Search_word = ["Misc_VirtualSize:" , "SizeOfRawData:" , "NumberOfRelocations:" , "NumberOfLinenumbers:" , "Entropy:"]
    feature = header[:30]
    return(feature , Search_word , header)


# In[94]:


def dynamic_feature():
    antivirus = set()
    for i in os.listdir('/home/amit/Downloads/Dynamic_Analysis_Data_Part1(1)/Dynamic_Analysis_Data_Part1/Malware/'):
        for j in os.listdir('/home/amit/Downloads/Dynamic_Analysis_Data_Part1(1)/Dynamic_Analysis_Data_Part1/Malware/' + i):
            path = '/home/amit/Downloads/Dynamic_Analysis_Data_Part1(1)/Dynamic_Analysis_Data_Part1/Malware/' + i + '/' + j

            if(len(j)>5 and j[-5:] == '.json'):
                with open(path, errors='ignore') as f:  
                        data = json.loads(f.read() , strict = False)
                        for k in data:
                            if k == "virustotal":
                                for l in data[k]:
                                    if l == 'scans':
                                        for m in data[k][l]:
                                            antivirs_name = m
                                            antivirus.add(antivirs_name)
               

    antivirus1 = list(antivirus)
    
    return(antivirus1)
    


# In[95]:


def string_matrix(static_path , data_sorted):
    Y = []
    X = [{}]
    a = os.listdir('/home/amit/Downloads/Static_Analysis_Data/Malware/')
    for i in a:    
        for j in os.listdir(static_path + '/Malware/' + i):
            path =  static_path +  '/Malware/' + i + '/'+ j + '/String.txt'
            f = open(path, "r")
            string_file = f.read()
            f.close()
            t = {}
            l = 0
            for word in data_sorted:
                if word in string_file:
                    t[word] = 1
                else:
                    t[word] = 0 
                l = l + 1
                if l >= 1000:
                    break
            X.append(t)
            Y.append(1)
        
    for j in os.listdir(static_path + '/Benign/'):
        path = static_path + '/Benign/' + j + '/String.txt'
        f = open(path, "r")
        string_file = f.read()
        f.close()
        t = {}
        l = 0
        for word in data_sorted:
            if word in string_file:
                t[word] = 1
            else:
                t[word] = 0 
            l = l + 1
            if l >= 1000:
                break
        X.append(t)
        Y.append(0)
           
    X = pd.DataFrame(X, columns = data_sorted)
    X = X.drop([0])
    Y = pd.DataFrame(Y , columns = ['Malware'])
    return(X , Y)
    
    


# In[96]:


def structure_matrix(feature , Search_word , header):
    fea_ind = {}
    k = 0
    for x in feature:
        fea_ind[x] = k
        k += 1
    
    a = os.listdir('/home/amit/Downloads/Static_Analysis_Data/Malware/')
    data = []
    
    vis = [0 for x in feature]
    data1 = []
    
    k = 0
    for i in a:    
        for j in os.listdir('/home/amit/Downloads/Static_Analysis_Data/Malware/' + i):
            path = '/home/amit/Downloads/Static_Analysis_Data/Malware/' + i + '/'+ j + '/Structure_Info.txt'
            detail = []
            with open(path, encoding="utf8", errors='ignore') as f:
                file_list = f.readlines()
                for x in file_list:
                    for y in feature:
                        if y in x:
                            if vis[fea_ind[y]] == 0:
                                lis = x.strip().split(" ")
                                detail.append(int(lis[-1] , 16))
                                vis[fea_ind[y]] = 1

                for y in Search_word:
                    feature_detail = []
                    if y == "Entropy:":
                        for x in file_list:
                            if y in x:
                                lis = x.strip().split(" ")
                                feature_detail.append(float(lis[1]))
                    else:
                        for x in file_list:
                            if y in x:
                                lis = x.strip().split(" ")
                                feature_detail.append(int(lis[-1] , 16))

                    if(len(feature_detail) == 0):
                        detail.append(0)
                        detail.append(0)
                        detail.append(0)
                    else:
                        detail.append(sum(feature_detail)/len(feature_detail))
                        detail.append(min(feature_detail))
                        detail.append(max(feature_detail))


                data.append(detail)
            vis = [0 for x in feature]
            
    for j in os.listdir('/home/amit/Downloads/Static_Analysis_Data/Benign/'):
        path = '/home/amit/Downloads/Static_Analysis_Data/Benign/' + j + '/Structure_Info.txt'
        detail = []
        with open(path, encoding="utf8", errors='ignore') as f:
            file_list = f.readlines()
            for x in file_list:
                for y in feature:
                    if y in x:
                        if vis[fea_ind[y]] == 0:
                            lis = x.strip().split(" ")
                            detail.append(int(lis[-1] , 16))
                            vis[fea_ind[y]] = 1
                            
            for y in Search_word:
                feature_detail = []
                if y == "Entropy:":
                    for x in file_list:
                        if y in x:
                            lis = x.strip().split(" ")
                            feature_detail.append(float(lis[1]))
                else:
                    for x in file_list:
                        if y in x:
                            lis = x.strip().split(" ")
                            feature_detail.append(int(lis[-1] , 16))
                
                if(len(feature_detail) == 0):
                    detail.append(0)
                    detail.append(0)
                    detail.append(0)
                else:
                    detail.append(sum(feature_detail)/len(feature_detail))
                    detail.append(min(feature_detail))
                    detail.append(max(feature_detail))
                
                
                
            data.append(detail)
        vis = [0 for x in feature]
        
    X = pd.DataFrame(data, columns = header)
    
    for x in header:
        median = X[x].median()
        X[x].fillna(median, inplace=True)
    X.isnull().sum()
    
    return(X)

    


# In[97]:


def dynamic_matrix(antivirus1):
    anti_ind = {}
    k = 0
    for i in antivirus1:
        anti_ind[i] = k
        k += 1
    
    X = []
    Y = []
    
    for i in os.listdir('/home/amit/Downloads/Dynamic_Analysis_Data_Part1(1)/Dynamic_Analysis_Data_Part1/Malware/'):
        for j in os.listdir('/home/amit/Downloads/Dynamic_Analysis_Data_Part1(1)/Dynamic_Analysis_Data_Part1/Malware/' + i):
            path = '/home/amit/Downloads/Dynamic_Analysis_Data_Part1(1)/Dynamic_Analysis_Data_Part1/Malware/' + i + '/' + j

            with open(path, 'r') as f:
                data = json.loads(f.read())
                Y.append(1)
                mark = []
                for p in antivirus1:
                        mark.append(0)
                for k in data:
                        if k == "virustotal":
                            for l in data[k]:
                                if l == 'scans':
                                    for m in data[k][l]:
                                        if m in antivirus1:
                                            if str(data[k][l][m]['detected']).lower() == 'true':
                                                mark[anti_ind[m]] = 1

                                            else:
                                                mark[anti_ind[m]] = 0

                X.append(mark)

    for j in os.listdir('/home/amit/Downloads/Dynamic_Analysis_Data_Part1(1)/Dynamic_Analysis_Data_Part1/Benign/' ):
            path = '/home/amit/Downloads/Dynamic_Analysis_Data_Part1(1)/Dynamic_Analysis_Data_Part1/Benign/'  + j

            with open(path, 'r') as f:
                data = json.loads(f.read())
                Y.append(0)
                mark = []
                for p in antivirus1:
                        mark.append(0)
                for k in data:
                        if k == "virustotal":
                            for l in data[k]:
                                if l == 'scans':
                                    for m in data[k][l]:
                                        if m in antivirus1:
                                            if str(data[k][l][m]['detected']).lower() == 'true':
                                                mark[anti_ind[m]] = 1
                                            else:
                                                mark[anti_ind[m]] = 0

                X.append(mark)
    return(X,Y)

    


# In[104]:


def train_static_model():
    #feature = string_feature('/home/amit/Downloads/Static_Analysis_Data')
    
    a_file = open("/home/amit/Videos/hackthon/features.json", "r")
    output = json.loads(a_file.read())
    
    feature = output['header']
    
    feature1 = output['feature']
    search_word = output['search_word']
    header = output['header1']
    
    a_file.close()
    
    X2 , Y = string_matrix('/home/amit/Downloads/Static_Analysis_Data', feature)
    #feature1 , search_word , header = structure_feature()
    X1 = structure_matrix(feature1 , search_word , header)
    for x in header:
        median = X1[x].median()
        X1[x].fillna(median, inplace=True)
    
    X = pd.concat([X2,X1], axis=1)
    
    X3 = pd.concat([X , Y] ,axis = 1)
    X3.dropna(inplace = True)
    X4 = X3.drop("Malware" , axis =1)
    Y1 = X3['Malware']
    clf = ske.RandomForestClassifier(n_estimators=100)
    clf.fit(X4, Y1.values.ravel())

    filename = '/home/amit/Videos/hackthon/static_model.sav'
    pickle.dump(clf, open(filename, 'wb'))


# In[130]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:



    


# In[79]:


def train_dynamic():
    #antivirus1 = dynamic_feature()
    a_file = open("/home/amit/Videos/hackthon/features.json", "r")
    output = json.loads(a_file.read())
    
    antivirus1 = output['antivirus1']
    
    a_file.close()
    X , Y = dynamic_matrix(antivirus1)
    
    X = pd.DataFrame(X, columns = antivirus1)
    Y = pd.DataFrame(Y, columns = ["Malware"])
    
    
    clf = ske.RandomForestClassifier(n_estimators=100)
    clf.fit(X, Y.values.ravel())
    filename = '/home/amit/Videos/hackthon/dynamic_model.sav'
    pickle.dump(clf, open(filename, 'wb'))
    


# In[83]:


def save_features():
    
    header = string_feature('/home/amit/Downloads/Static_Analysis_Data')
    feature , search_word , header1  = structure_feature()
    antivirus1 = dynamic_feature()
    
    feature1 = {"header" : header , "feature" : feature , "search_word" : search_word , "header1":header1 , "antivirus1" : antivirus1}
    
    a_file = open("/home/amit/Videos/hackthon/features.json", "w")
    json.dump(feature1, a_file)

    a_file.close()


# In[84]:


save_features()


# In[40]:





# In[41]:





# In[54]:





# In[48]:


a_f = open("/home/amit/Videos/hackthon/features.json" , 'w')
json.dump(s ,a_f )


# In[85]:


train_dynamic()


# In[103]:


train_static_model()


# In[ ]:





# In[ ]:





# In[ ]:





# In[ ]:




