#!/usr/bin/env python
# coding: utf-8

# In[30]:


import pandas as pd
import numpy as np
import pickle
import sklearn.ensemble as ske
from sklearn import tree, linear_model
from sklearn.model_selection import train_test_split
from sklearn.feature_selection import SelectFromModel

from sklearn.naive_bayes import GaussianNB
from sklearn.ensemble import RandomForestClassifier
from sklearn.datasets import make_classification

from sklearn.feature_selection import SelectFromModel
from sklearn.model_selection import train_test_split
import os
import glob
import json
import sys


# In[31]:


def dynamic_matrix(path , anti_ind):
     
    mark = []
    with open(path, 'r') as f:
                data = json.loads(f.read())
                
                
                for p in antivirus1:
                        mark.append(0)
                for k in data:
                        if k == "virustotal":
                            for l in data[k]:
                                if l == 'scans':
                                    for m in data[k][l]:
                                        if m in antivirus1:
                                            if str(data[k][l][m]['detected']).lower() == 'true':
                                                mark[anti_ind[m]] = 1

                                            else:
                                                mark[anti_ind[m]] = 0

    return(mark)


# In[35]:


def string_matrix(path , data_sorted):
    
    f = open(path, "r")
    string_file = f.read()
    f.close()
    t = {}
    l = 0
    for word in data_sorted:
        if word in string_file:
            t[word] = 1
        else:
            t[word] = 0 
            
    return(t)


# In[33]:


def structure_matrix(path , feature , Search_word , header , fea_ind):
    vis = [0 for x in feature]
    detail = []
    with open(path, encoding="utf8", errors='ignore') as f:
                file_list = f.readlines()
                for x in file_list:
                    for y in feature:
                        if y in x:
                            if vis[fea_ind[y]] == 0:
                                lis = x.strip().split(" ")
                                detail.append(int(lis[-1] , 16))
                                vis[fea_ind[y]] = 1

    for y in Search_word:
                    feature_detail = []
                    if y == "Entropy:":
                        for x in file_list:
                            if y in x:
                                lis = x.strip().split(" ")
                                feature_detail.append(float(lis[1]))
                    else:
                        for x in file_list:
                            if y in x:
                                lis = x.strip().split(" ")
                                feature_detail.append(int(lis[-1] , 16))

                    if(len(feature_detail) == 0):
                        detail.append(0)
                        detail.append(0)
                        detail.append(0)
                    else:
                        detail.append(sum(feature_detail)/len(feature_detail))
                        detail.append(min(feature_detail))
                        detail.append(max(feature_detail))


    return(detail)
            
    


# In[50]:


if __name__ == '__main__':
    count = 0
    path = '/home/amit/Videos/test'   # sys.argv[1]
    output = {}
    dynamic_X = []
    dynamic_name = []
    static_X1 = []
    static_X2 = []
    static_name = []
    
    a_file = open("features.json", "r")
    output1  = json.loads(a_file.read())
    antivirus1 = output1['antivirus1']
    
    
    anti_ind = {}
    k = 0
    for i in antivirus1:
        anti_ind[i] = k
        k += 1
        
        
    feature =     output1['feature']
    search_word = output1['search_word']
    header = output1['header1']
    
    fea_ind = {}
    k = 0
    for x in feature:
        fea_ind[x] = k
        k += 1
    
    data_sorted = output1['header']
    a_file.close()
    
    for i in os.listdir(path):
        for j in os.listdir(path + '/' + i):
            if(j[-5 : ] == '.json'):
                p1 = path + '/' + i + '/' + j
                X = dynamic_matrix(p1 , anti_ind)
                dynamic_X.append(X)
                dynamic_name.append(j[:-5])
                
            else:
                for k in os.listdir(path + '/' + i + '/' + j):
                    count += 1
                    p1 = path + '/' + i + '/' + j + '/' + k
                    if(k == 'String.txt'):
                        X1 = string_matrix(p1 , data_sorted)
                        static_X1.append(X1)
                    if(k == 'Structure_Info.txt'):
                        X2 = structure_matrix(p1 , feature , search_word , header , fea_ind)
                        static_X2.append(X2)
                        
                     
                static_name.append(j)
    
    
    X1 = pd.DataFrame(static_X1, columns = data_sorted)
    X2 = pd.DataFrame(static_X2, columns = header)
    static_X =  pd.concat([X1,X2], axis=1)
    static_model = pickle.load(open('static_model.sav', 'rb'))
    
    Y_Static = static_model.predict(static_X)
    
    dynamic_model = pickle.load(open('dynamic_model.sav', 'rb'))
    Y_dynamic = dynamic_model.predict(dynamic_X)
    
    k = 0
    for i in Y_dynamic:
        if(i == 1):
            output[dynamic_name[k]] = "Malware"
        else:
            output[dynamic_name[k]] = "Benign"
        k += 1
        
    k = 0 
    for i in Y_Static:
        if(i == 1):
            output[static_name[k]] = "Malware"
        else:
            output[static_name[k]] = "Benign"
        k += 1
        
    
    df = pd.DataFrame(list(output.items()),columns = ['hash_value','Prediction']) 
    
    
    df.to_csv('output.csv', index = False , header=False)
    
          
                


# In[ ]:





# In[ ]:




